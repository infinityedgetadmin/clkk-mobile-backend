name: Deploy to Staging and Production

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - staging
          - prod

env:
  AWS_REGION: us-east-1
  STACK_NAME: clkk-backend
  NODE_VERSION: '20.x'

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup AWS SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: make install

      - name: Generate GraphQL types
        run: npm run codegen

      - name: Run tests
        run: npm test
        continue-on-error: true  # Remove once tests are implemented

      - name: Build SAM application
        run: |
          sam build \
            --use-container \
            --build-image public.ecr.aws/sam/build-nodejs20.x:latest \
            --parallel \
            --cached

      - name: Deploy to Staging
        run: |
          sam deploy \
            --stack-name ${{ env.STACK_NAME }}-staging \
            --parameter-overrides "Environment=staging" \
            --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --s3-prefix staging \
            --region ${{ env.AWS_REGION }}

  deploy-prod:
    name: Deploy to Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    if: github.event_name == 'push' || github.event.inputs.environment == 'prod'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup AWS SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: make install

      - name: Generate GraphQL types
        run: npm run codegen

      - name: Run tests
        run: npm test

      - name: Build SAM application
        run: |
          sam build \
            --use-container \
            --build-image public.ecr.aws/sam/build-nodejs20.x:latest \
            --parallel \
            --cached

      - name: Deploy to Production
        run: |
          sam deploy \
            --stack-name ${{ env.STACK_NAME }}-prod \
            --parameter-overrides "Environment=prod" \
            --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --s3-prefix prod \
            --region ${{ env.AWS_REGION }}

      - name: Create deployment notification
        if: success()
        run: |
          echo "ðŸŽ‰ Successfully deployed to production!"
          echo "Version: ${{ github.ref_name }}"
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: API stack for CLKK Backend V3 - AppSync GraphQL API with Lambda authorizer

Parameters:
  StackName:
    Type: String
    Description: Parent stack name
  
  Environment:
    Type: String
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment name
  
  DomainName:
    Type: String
    Default: ""
    Description: Custom domain name for the API (optional)
  
  ApplicationTableName:
    Type: String
    Description: DynamoDB application table name
  
  ApplicationTableArn:
    Type: String
    Description: DynamoDB application table ARN
  
  PowertoolsLayerArn:
    Type: String
    Description: ARN of the Powertools Lambda layer
  
  GraphQLTypesLayerArn:
    Type: String
    Description: ARN of the GraphQL types Lambda layer

Conditions:
  HasDomainName: !Not [!Equals [!Ref DomainName, ""]]

Resources:
  # AppSync GraphQL API
  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub "${StackName}-api"
      AuthenticationType: AWS_LAMBDA
      LambdaAuthorizerConfig:
        AuthorizerUri: !GetAtt AuthorizerFunction.Arn
        AuthorizerResultTtlInSeconds: 300
        IdentityValidationExpression: ".*"
      AdditionalAuthenticationProviders:
        - AuthenticationType: API_KEY
      XrayEnabled: true
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt AppSyncLoggingRole.Arn
        ExcludeVerboseContent: false
        FieldLogLevel: ALL
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # API Key for development/testing
  ApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Description: !Sub "API Key for ${Environment} environment"
      Expires: !Ref AWS::NoValue # Set expiration based on environment

  # GraphQL Schema
  GraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      DefinitionS3Location: ../../graphql/schema.graphql

  # Data Source for None (local resolvers)
  NoneDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: NoneDataSource
      Type: NONE

  # Lambda Authorizer Function
  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackName}-authorizer"
      CodeUri: authorizer/
      Handler: index.handler
      Runtime: nodejs20.x
      Timeout: 10
      MemorySize: 512
      Layers:
        - !Ref PowertoolsLayerArn
        - !Ref GraphQLTypesLayerArn
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          TABLE_NAME: !Ref ApplicationTableName
          POWERTOOLS_SERVICE_NAME: api-authorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ApplicationTableName
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${StackName}/*"
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2022
        Sourcemap: false
        EntryPoints:
          - index.ts

  # Permission for AppSync to invoke the authorizer
  AuthorizerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AuthorizerFunction
      Action: lambda:InvokeFunction
      Principal: appsync.amazonaws.com
      SourceArn: !GetAtt GraphQLApi.Arn

  # IAM Role for AppSync logging
  AppSyncLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs

  # CloudWatch Log Group for AppSync
  AppSyncLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/appsync/apis/${GraphQLApi.ApiId}"
      RetentionInDays: 7

  # Custom Domain (if provided)
  # Note: Domain certificate must already exist in ACM
  # CustomDomain:
  #   Type: AWS::AppSync::DomainName
  #   Condition: HasDomainName
  #   Properties:
  #     DomainName: !Ref DomainName
  #     CertificateArn: !Sub "arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/your-cert-id"

  # DomainAssociation:
  #   Type: AWS::AppSync::DomainNameApiAssociation
  #   Condition: HasDomainName
  #   Properties:
  #     ApiId: !GetAtt GraphQLApi.ApiId
  #     DomainName: !Ref DomainName

  # Example resolver for health check
  HealthCheckResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: health
      DataSourceName: !GetAtt NoneDataSource.Name
      Runtime:
        Name: APPSYNC_JS
        RuntimeVersion: 1.0.0
      Code: |
        export function request(ctx) {
          return {};
        }
        
        export function response(ctx) {
          return {
            status: 'healthy',
            timestamp: new Date().toISOString(),
            environment: '${Environment}'
          };
        }

Outputs:
  GraphQLApiEndpoint:
    Description: GraphQL API endpoint URL
    Value: !GetAtt GraphQLApi.GraphQLUrl
  
  GraphQLApiId:
    Description: GraphQL API ID
    Value: !GetAtt GraphQLApi.ApiId
  
  GraphQLApiArn:
    Description: GraphQL API ARN
    Value: !GetAtt GraphQLApi.Arn
  
  ApiKey:
    Description: API Key for development
    Value: !GetAtt ApiKey.ApiKey
  
  AuthorizerFunctionArn:
    Description: ARN of the authorizer Lambda function
    Value: !GetAtt AuthorizerFunction.Arn